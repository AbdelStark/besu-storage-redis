/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

sourceCompatibility = 11

repositories {
    jcenter()
    maven { url 'https://hyperledger-org.bintray.com/besu-repo' }
    mavenCentral()
}

dependencies {
    annotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'

    compile 'io.lettuce:lettuce-core:5.2.2.RELEASE'
    compileOnly 'commons-codec:commons-codec:1.14'
    compileOnly 'com.google.auto.service:auto-service:1.0-rc4'
    compileOnly 'info.picocli:picocli:3.9.5'
    compileOnly 'org.apache.logging.log4j:log4j-api:2.12.0'
    compileOnly 'org.apache.logging.log4j:log4j-core:2.12.0'
    compileOnly 'org.hyperledger.besu:plugin-api:1.4.1-SNAPSHOT'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    // Use JUnit test framework
    testImplementation 'org.junit.platform:junit-platform-runner:1.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'

    testImplementation 'org.assertj:assertj-core:3.15.0'
    testCompile 'org.mockito:mockito-core:3.3.0'
    testCompile 'org.mockito:mockito-junit-jupiter:3.3.0'
    testImplementation 'org.hyperledger.besu:plugin-api:1.4.1-SNAPSHOT'

    testImplementation 'org.mockito:mockito-core'
}

//create a single Jar with all dependencies
jar {
    //dependsOn checkLicenses
    archiveBaseName = project.name + '-plugin'
    manifest {
        attributes(
                'Specification-Title': archiveBaseName.get(),
                'Specification-Version': rootProject.version,
                'Implementation-Title': archiveBaseName.get(),
                'Implementation-Version': rootProject.version
        )
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
}
